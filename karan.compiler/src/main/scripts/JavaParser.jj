 /**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  STATIC = false;}PARSER_BEGIN(JavaParser)package com.google.code.jcooky.rpc.compiler.java.parser;import java.util.*;import java.io.*;public class JavaParser{  public Map parse() throws ParseException  {    try    {      Map attributes = new HashMap();      start(attributes);      return attributes;    }    catch (Exception e)    {      System.out.println("NOK.");      System.out.println(e.getMessage());      throw new RuntimeException(e);    }    catch (Error e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());      throw new RuntimeException(e);    }  }}PARSER_END(JavaParser)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* Types */{  < LANG :    "java"  | "cpp" >| < VOID : "void" >| < TYPE :    "char"  | "short"  | "int"  | "long"  | "bool"  | "float"  | "string"  | "double"
  | "list"
  | "map" >}TOKEN :{  < ENUM : "enum" >| < STRUCT : "struct" >| < NAMESPACE : "namespace" >| < SERVICE : "service" >| < SMALL_BRACE_BEGIN : "(" >| < SMALL_BRACE_END : ")" >| < MIDDLE_BRACE_BEGIN : "{" >| < MIDDLE_BRACE_END : "}" >| < EOO : ";" >| < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < NUMBER :     < DIGIT >     (< DIGIT >    )* >| < #LETTER : [ "_", ".", "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}void start(Map parseMap) :{  List services = new ArrayList();  List namespaces = new ArrayList();  List structs = new ArrayList();  List enums = new ArrayList();}{  (    < NAMESPACE > namespace(namespaces) < EOO >  | < STRUCT > struct(structs) < EOO >  | < SERVICE > service(services) < EOO >  | < ENUM > parse_enum(enums) < EOO >  )*  {    parseMap.put("namespaces", namespaces);    parseMap.put("structs", structs);    parseMap.put("services", services);    parseMap.put("enums", enums);  }}void parse_enum(List attr) :{  Token enum_name;  List entries = new ArrayList();}{  enum_name = < IDENTIFIER > < MIDDLE_BRACE_BEGIN > enum_body(entries) < MIDDLE_BRACE_END >  {    Map enumMap = new HashMap();    enumMap.put("enum_name", enum_name.toString());    enumMap.put("entries", entries);    attr.add(enumMap);  }}void enum_body(List attr) :{  Token key = null, value = null;}{  (    key = < IDENTIFIER > "=" value = < NUMBER > < EOO >    {      Map entryMap = new HashMap();      entryMap.put("key", key.toString());      entryMap.put("value", Integer.parseInt(value.toString()));      attr.add(entryMap);    }  )*}void struct(List attr) :{  Token struct_name;  List variables = new ArrayList();}{  struct_name = < IDENTIFIER > < MIDDLE_BRACE_BEGIN > struct_body(variables) < MIDDLE_BRACE_END >  {    Map structMap = new HashMap();    structMap.put("struct_name", struct_name.toString());    structMap.put("variables", variables);    attr.add(structMap);  }}void struct_body(List attr) :{  Token var_type;  Token var_name;}{  (    var_type = type() var_name = < IDENTIFIER > < EOO >    {      Map varMap = new HashMap();      varMap.put("var_type", var_type.toString());      varMap.put("var_name", var_name.toString());      attr.add(varMap);    }  )*}void namespace(List attr) :{  Token namespace_language;  Token namespace_package;}{  namespace_language = < LANG > namespace_package = < IDENTIFIER >  {    Map namespaceMap = new HashMap();    namespaceMap.put("namespace_language", namespace_language.toString());    namespaceMap.put("namespace_package", namespace_package.toString());    attr.add(namespaceMap);  }}void service(List attr) :{  Token service_name;  List methods = new ArrayList();}{  service_name = < IDENTIFIER > < MIDDLE_BRACE_BEGIN > method(methods) < MIDDLE_BRACE_END >  {    Map serviceMap = new HashMap();    serviceMap.put("service_name", service_name.toString());    serviceMap.put("methods", methods);    attr.add(serviceMap);  }}void method(List attr) :{  Token method_type;  Token method_name;  List args = new ArrayList();}{  (    method_type = resultType() method_name = < IDENTIFIER > < SMALL_BRACE_BEGIN > method_arguments(args) < SMALL_BRACE_END > < EOO >    {      Map methodMap = new HashMap();      methodMap.put("method_type", method_type.toString());      methodMap.put("method_name", method_name.toString());      methodMap.put("method_arguments", args);      attr.add(methodMap);      args = new ArrayList();    }  )*}void method_arguments(List attr) :{  Token argument_type;  Token argument_name;}{  (    (      argument_type = type() argument_name = < IDENTIFIER > (",")?    )    {      Map argMap = new HashMap();      argMap.put("argument_type", argument_type.toString());      argMap.put("argument_name", argument_name.toString());      attr.add(argMap);    }  )*}Token resultType() :{  Token t;}{  (    t = < VOID >  | t = type()  )  {    return t;  }}Token type() :{  Token t;}{  (    t = referenceType()  | t = primitiveType()  )  {    return t;  }}Token primitiveType() :{  Token t;}{  t = < TYPE >  {    return t;  }}Token referenceType() :{  Token t;}{  t = < IDENTIFIER >  {    return t;  }}
